# -*- coding: utf-8 -*-
"""BREAST CANCER PREDICTOR USING MACHINE LEARNING AND AI

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VlgPwJmZiGSgTB2ynWi9KnFfDcxE2W_E
"""

#SELECT THE BREAST CANCER FILE

from google.colab import files
uploaded = files.upload()

!pip install numpy pandas matplotlib seaborn plotly scikit-learn xgboost shap

# Import necessary libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import plotly.graph_objects as go
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier, StackingClassifier
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report, roc_curve, auc
from xgboost import XGBClassifier
import shap

# Load the dataset
from google.colab import files
uploaded = files.upload()

# Read the dataset
df = pd.read_csv('Breast Cancer.csv')

# Display the first 5 rows
print(df.head())

"""**DATA PREPROCESSING**

Drop the Unnecessary colums
"""

# Drop the 'Patient Id' column
df = df.drop(columns=['Patient Id'])

# Display the first 5 rows after dropping the column
print(df.head())

"""Check for Missing Values"""

# Check for missing values
print(df.isnull().sum())

"""Feature Scaling"""

# Separate features (X) and target (y)
X = df.drop(columns=['Patient Status'])
y = df['Patient Status']

# Scale the features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Display the first 5 rows of scaled features
print(X_scaled[:5])

"""**INTERACTIVE DATA VISUALIZATION**

Correlation Heatmap
"""

# Correlation matrix
corr_matrix = df.corr()

# Interactive heatmap using Plotly
fig = px.imshow(corr_matrix, text_auto=True, color_continuous_scale='Viridis', title="Correlation Heatmap")
fig.show()

"""ROC Curve"""

from sklearn.metrics import roc_curve, auc
from xgboost import XGBClassifier # Import XGBClassifier

# Initialize and train the XGBoost model
xgb_model = XGBClassifier(random_state=42)  # Create an instance of XGBClassifier
xgb_model.fit(X_train, y_train)  # Train the model

# ROC Curve
y_pred_proba = xgb_model.predict_proba(X_test)[:, 1]
fpr, tpr, thresholds = roc_curve(y_test, y_pred_proba)
roc_auc = auc(fpr, tpr)

plt.figure()
plt.plot(fpr, tpr, color='darkorange', lw=2, label='ROC curve (area = %0.2f)' % roc_auc)
plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('Receiver Operating Characteristic (ROC) Curve')
plt.legend(loc="lower right")
plt.show()

"""Distribution of Target Variable"""

# Interactive count plot using Plotly
import plotly.express as px

# Define custom colors
custom_colors = ['#1f77b4', '#ff7f0e']  # Blue and Orange

# Create the interactive count plot with custom colors
fig = px.histogram(
    df,
    x='Patient Status',
    color='Patient Status',
    title="Distribution of Patient Status",
    color_discrete_sequence=custom_colors  # Add custom colors
)


# Show the plot
fig.show()

"""**Split the Data into Training and Testing Sets**"""

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# Display the shapes of the training and testing sets
print("Training set shape:", X_train.shape, y_train.shape)
print("Testing set shape:", X_test.shape, y_test.shape)

"""**Train and Evaluate Models**

Random Forest Classifier
"""

# Initialize the Random Forest model
rf_model = RandomForestClassifier(n_estimators=100, random_state=42)

# Train the model
rf_model.fit(X_train, y_train)

# Make predictions
y_pred_rf = rf_model.predict(X_test)

# Evaluate the model
print("Random Forest Accuracy:", accuracy_score(y_test, y_pred_rf))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred_rf))
print("Classification Report:\n", classification_report(y_test, y_pred_rf))

"""**Model Predictions with SHAP**"""

# Explain the model's predictions using SHAP
explainer = shap.TreeExplainer(rf_model)
shap_values = explainer.shap_values(X_train)

# Visualize the SHAP values for the first prediction
shap.summary_plot(shap_values, X_train, plot_type="bar")

import joblib

# Save the Random Forest model
joblib.dump(rf_model, 'breast_cancer_rf_model.pkl')

# To load the model later:
# loaded_model = joblib.load('breast_cancer_rf_model.pkl')